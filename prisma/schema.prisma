generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model authors {
  author_id           Int                   @id @default(autoincrement())
  author_name         String                @db.VarChar(100)
  authors_write_books authors_write_books[]
}

model authors_write_books {
  ab_id     Int     @unique(map: "UN_ab_id") @default(autoincrement())
  author_id Int
  book_id   Int
  authors   authors @relation(fields: [author_id], references: [author_id], map: "FK_ab_authors")
  books     books   @relation(fields: [book_id], references: [book_id], onDelete: Cascade, map: "FK_ab_books")

  @@id([author_id, book_id])
  @@index([book_id], map: "FK_ab_books")
}

model books {
  book_id             Int                   @id @default(autoincrement())
  title               String                @db.VarChar(200)
  publisher_id        Int
  publication_date    DateTime?             @db.Date
  cover_source        String                @default("assets/bookcovers/temp.png") @db.VarChar(100)
  pages               Int?                  @db.UnsignedInt
  publishers          publishers            @relation(fields: [publisher_id], references: [publisher_id], onDelete: Cascade, map: "FK_books_publishers")
  authors_write_books authors_write_books[]
  books_have_genres   books_have_genres[]
  users_review_books  users_review_books[]

  @@index([publisher_id], map: "FK_books_publishers")
}

model books_have_genres {
  bc_id       Int        @unique(map: "UN_bc_id") @default(autoincrement())
  book_id     Int
  category_id Int
  books       books      @relation(fields: [book_id], references: [book_id], onDelete: Cascade, map: "FK_bc_books")
  categories  categories @relation(fields: [category_id], references: [category_id], map: "FK_bc_genres")

  @@id([book_id, category_id])
  @@index([category_id], map: "FK_bc_genres")
}

model categories {
  category_id       Int                 @id @default(autoincrement())
  category_name     String              @unique(map: "UN_category_name") @db.VarChar(100)
  books_have_genres books_have_genres[]
}

model publishers {
  publisher_id   Int     @id @default(autoincrement())
  publisher_name String  @unique(map: "UN_publisher_name") @db.VarChar(100)
  books          books[]
}

model users {
  user_id            Int                  @unique(map: "UN_user_id") @default(autoincrement())
  username           String               @id @db.VarChar(100)
  password           String               @db.VarChar(100)
  birthday           DateTime?            @db.Date
  nationality        String?              @db.VarChar(100)
  users_review_books users_review_books[]
}

model users_review_books {
  ub_id    Int     @unique(map: "UN_ub_id") @default(autoincrement())
  username String  @db.VarChar(100)
  book_id  Int
  rating   Int
  comment  String? @db.VarChar(10000)
  books    books   @relation(fields: [book_id], references: [book_id], onDelete: Cascade, map: "FK_ub_books")
  users    users   @relation(fields: [username], references: [username], onDelete: Cascade, map: "FK_ub_users")

  @@id([book_id, username])
  @@index([username], map: "FK_ub_users")
}
